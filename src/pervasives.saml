include("builtin.saml")

def printnl(x) =
  print(x)
  print("\n")
end

def id(x) = x end

def prev(init, x) =
  y = ref(init)
  ans = !y
  y := x
  ans
end

module int =
  eq = builtin("ieq")

  add = builtin("iadd")

  def incr(x) =
    x := add(!x, 1)
  end

  sub = builtin("isub")

  to_float = builtin("float_of_int")

  lt = builtin("ilt")

  def gt(x,y) = lt(y,x) end

  le = builtin("ile")
end

module array =
  create = builtin("array_create")

  get = builtin("array_get")

  set = builtin("array_set")

  play = builtin("array_play")
end

module integrator =
  def euler(phase=0., reset=id, freq) =
    x = ref(phase)
    ans = !x
    x := reset(!x + dt * freq)
    ans
  end
end

module time =
  def now() = integrator.euler(1.) end
end

module osc =
  def sine(freq) = sin(2. * pi * integrator.euler(freq)) end

  def saw(phase=0., freq) =
    def reset(x) =
      if x >= 2. then x - 2. else x end
    end
    x = integrator.euler(phase=,freq,reset=)
    x - 1.
  end

  def square(freq) =
    x = saw(freq)
    if x >= 0.5 then (-1.) else 1. end
  end

  def triangle(freq) =
    x = saw(phase=0.25, freq)
    if x <= 0. then 2.*x+1. else (-2.)*x+1. end
  end

  def play(buflen=1024, s) =
    # Remove the effects in s
    def s() =
      s = undt(s())
      s(1./44100.)
    end
    s = unref(s())
    def s() = s.run(s.init) end
    buf = array.create(buflen, 0.)
    while true do
      # print("loop ")
      # print(buf[0])
      # print("\n")
      for i = 0 to int.sub(buflen, 1) do
        buf[i] := s()
      done
      array.play(buf)
    done
  end
end

module frequency =
  def vibrato(freq, amp, x) =
      (1.+amp*osc.sine(freq))*x
  end
end

module envelope =
  def gain(n,x) = n*x end

    # let activate(x) =
      # let active = ref false in
      # let x = if !active then x else 0. in
      # (x, activate=fun()->active:=true)

    # The functions should be valid between 0 and 1 and return something between
    # 0 (at begining) and 1 (at end), dfun and rfun being read backwards.
    def adsr(a,afun=id,d,dfun=id,s,r,rfun=id,on_die=fun()->nop,x) =
      t = time.now()
      state = ref(0)
      rtime = ref(-1.)
      def die () =
        state := 4
        on_die()
      end
      # Switch state
      if int.eq(!state,0) then
        if t >= a then state := 1 end
      elseif int.eq(!state,1) then
        if t >= a+d then
          if s == 0. then die() else state := 2 end
        end
      end
      def n =
        # Attack
        if int.eq(!state,0) then afun(t/a)
        # Decay
        elseif int.eq(!state,1) then dfun(1.-(t-a)/d)*(1.-s)+s
        # Released
        elseif int.eq(!state,4) then 0.
        # Release
        elseif !rtime >= 0. then
          if t-!rtime >= r then
            die()
            0.
          else
            rfun(1.-(t-!rtime)/r)*s
          end
        # Sustain
        else
          s
        end
      end
      {
        x = n*x
        release = fun() -> rtime := t
      }
  end

  def ad(a,afun=id,d,dfun=id,on_die=fun()->nop,x) = adsr(a,afun=,d,dfun=,0.,0.,on_die=,x) end

  def tremolo(amplitude,freq,x) =
    (1.+amplitude*osc.sine(freq))*x
  end
end

module filter =
  module first_order =
    def low_pass(freq, x) =
      rc = 1./(2.*pi*freq)
      a = dt/(rc+dt)
      # TODO.....
      # def rec y =
        # let y' = prev(0.,y) in
        # y'+a*(x-y')
      # end
      # y
    end
    lp = low_pass

      # let high_pass(freq,x) =
        # let rc = 1./(2.*pi*freq) in
        # let a = rc/(rc+dt) in
        # let rec y =
          # a*(prev(0.,y)+x-prev(0.,x))
        # in
        # y
      # let hp = high_pass
  end
  fo = first_order

    # let iir (a,b,x) =
      # (* let la = array.length a in *)
      # (* for i = 0 to la - 1 do *)
        # (* let  *)
      # (* done *)
      # ()

    # let fir (a,x) = iir(a,[],x)

  # See http://www.musicdsp.org/files/Audio-EQ-Cookbook.txt
  module biquad =
    def high_pass(freq,q,x) =
      w0 = 2.*pi*freq*dt
      alpha = sin(w0)/(2.*q)
      # a = [1.+alpha,-2.*cos(w0),1.-alpha]
      # b = [(1.+cos(w0))/2.,-(1.+cos(w0)),(1.+cos(w0))/2.]
    end
  end
end

module ringbuffer =
  def create(n,x) =
    a = array.create(int.add(n,1),x)
    {
      buf=a
      read=ref(0)
      write=ref(0)
      len=ref(n)
    }
  end

  def length(r) = !r.len end

  # def put(r,x) =
    # r.buf[!r.write] := x
    # r.write := !r.write+1
    # if int.gt(!r.write,length(r)) then r.write := 0 end
  # end

    # let get(r) =
      # let x = r.buf[!r.read] in
      # r.read := !r.read + 1;
      # if !r.read > length(r) then r.read := 0;
      # x
end

module effect =
  def delay(n,x) =
    a = array.create(int.add(n,1),0.)
    i = ref(0)
    a[!i] := x
    i := int.add(!i,1)
    if int.gt(!i,n) then i := 0 end
    a[!i]
  end
end

module midi =
  # A4 is 69.
  def freq(note) =
    440.*pow(2.,((int.to_float(note)-69.)/12.))
  end
end

# type instrument =
  # (
    # float,
    # period:(float)->(),
    # note:(int)->(),
    # activate:()->()
  # )

module instrument =
    # let make (note=ignore,gain=fun(x)->(),off=fun()->(),activate=fun()->(),is_active=fun()->true,f) =
      # (
        # note=,
        # gain=,
        # off=,
        # activate=,
        # is_active=,
        # f
      # )

  def adsr(a,d,s,r,x) =
    # period = ref(1./44100.)
    # dt = !period
    n = ref(69)
    # x = (x:(float)->float)
    x = x(midi.freq(!n))
    # x = envelope.activate(x)
    g = ref(1.)
    act = ref(false)
      # let on_die () = act := false in
      # let activate() = x.activate(); act := true in
      # let x = envelope.adsr(a,d,s,r,on_die=,x.) in
      # let ans =
        # (
          # !g*x.,
          # note = fun (x) -> (*print_nl(x);*) n := x,
          # gain = fun (x) -> g := x,
          # velocity = fun(x) -> g := x,
          # activate =,
          # is_active = fun () -> !act,
          # release = x.release,
          # period = fun(x) -> period := x
        # )
      # in
      # (* (ans : instrument) *)
      # ans
  end

# (*
    # let play(s) =
      # let player() =
        # let dt = 1./44100. in
        # let s = (s : ()->instrument) in
        # let prog = compile(s) in
        # let state = prog.alloc() in
        # let run() = prog.run(state) in
        # let note(n) = prog.note(state,n) in
        # let buflen = 1024 in
        # let buf = array.create(buflen,0.) in
        # let t = ref 0. in
        # let f = ref 440. in
        # prog.activate(state);
        # for i = 0 to buflen-1 do
          # buf[i] := run();
          # note(69);
          # t := !t + dt
          # if duration >= 0 then on(!t >= duration, release)
        # done;
        # array.play(buf)
      # in
      # run(player)
# *)
end

