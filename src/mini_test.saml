(* -*- tuareg -*- *)

include "builtin.saml"

let array =
  struct
    let create = builtin "array_create"

    let play = builtin "array_play"
  end

let play(buflen=1024,osc) =
  let osc() =
    let dt = 1. / 44100. in
    osc()
  in
  let buf = array.create(buflen,0.) in
  let osc = expand(osc) in
  let state = osc.alloc() in
  let x0 = osc.loop(init=true,state) in
  let x = ref x0 in
  while true do
    for i = 0 to buflen - 1 do
      buf[i] := !x;
      x := osc.loop(state)
    done;
    array.play(buf)
  done;
  ()

let id(x) = x

let euler(reset=id,phase=0.,f') =
  let x = ref phase in
  let ans = !x in
  x := !x + dt * f';
  x := reset(!x);
  ans

let sine(freq,phase=0.) = sin(2. * pi * euler(freq,phase=))

(* let s() = sine(220.) *)

(* let distort(f,s) = *)
  (* let dt = f(dt) in *)
  (* s() *)

(* let f(s) = fun () -> let dt = 4. * dt in s() *)
let f(s) = let dt = 4. * dt in s
(* let f(s) = distort (fun(t) -> 3.*t,s) *)
(* let f = id *)

(* let s = f(fun ()->dt) *)
let s() = sine(220.)
let s() = f(s())
(* let s() = f(fun () -> dt) *)


(* let () = play(fun () -> osc.sine(220.)) *)

let () = play(s)
